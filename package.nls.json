{
	"description": "Supercharge the Git capabilities built into Visual Studio Code — Visualize code authorship at a glance via Git blame annotations and code lens, seamlessly navigate and explore Git repositories, gain valuable insights via powerful comparison commands, and so much more",
	"gitlens.supportGitLens.title": "Support GitLens ❤",
	"gitlens.showSettingsPage.title": "Open Settings",
	"gitlens.showSettingsPage#repositories-view.title": "Open Settings",
	"gitlens.showSettingsPage#file-history-view.title": "Open Settings",
	"gitlens.showSettingsPage#line-history-view.title": "Open Settings",
	"gitlens.showSettingsPage#search-commits-view.title": "Open Settings",
	"gitlens.showSettingsPage#compare-view.title": "Open Settings",
	"gitlens.showWelcomePage.title": "Welcome",
	"gitlens.showCompareView.title": "Show Compare View",
	"gitlens.showFileHistoryView.title": "Show File History View",
	"gitlens.showLineHistoryView.title": "Show Line History View",
	"gitlens.showRepositoriesView.title": "Show Repositories View",
	"gitlens.showSearchView.title": "Show Search Commits View",
	"gitlens.diffDirectory.title": "Directory Compare Working Tree with...",
	"gitlens.diffDirectoryWithHead.title": "Directory Compare All Changes",
	"gitlens.diffHeadWith.title": "Compare HEAD with...",
	"gitlens.diffWorkingWith.title": "Compare Working Tree with...",
	"gitlens.diffWithRef.title": "Open Changes with...",
	"gitlens.diffWithNext.title": "Open Changes with Next Revision",
	"gitlens.diffWithNextInDiffLeft.title": "Open Changes with Next Revision",
	"gitlens.diffWithPrevious.title": "Open Changes with Previous Revision",
	"gitlens.diffWithPreviousInDiffRight.title": "Open Changes with Previous Revision",
	"gitlens.diffLineWithPrevious.title": "Open Line Changes with Previous Revision",
	"gitlens.diffWithRevision.title": "Open Changes with Revision...",
	"gitlens.diffWithWorking.title": "Open Changes with Working File",
	"gitlens.diffLineWithWorking.title": "Open Line Changes with Working File",
	"gitlens.toggleFileBlame.title": "Toggle File Blame Annotations",
	"gitlens.clearFileAnnotations.title": "Clear File Annotations",
	"gitlens.computingFileAnnotations.title": "Computing File Annotations...",
	"gitlens.toggleFileHeatmap.title": "Toggle File Heatmap Annotations",
	"gitlens.toggleFileRecentChanges.title": "Toggle Recent File Changes Annotations",
	"gitlens.toggleLineBlame.title": "Toggle Line Blame Annotations",
	"gitlens.toggleCodeLens.title": "Toggle Git Code Lens",
	"gitlens.gitCommands.title": "Git Commands",
	"gitlens.switchMode.title": "Switch Mode",
	"gitlens.toggleReviewMode.title": "Toggle Review Mode",
	"gitlens.toggleZenMode.title": "Toggle Zen Mode",
	"gitlens.showCommitSearch.title": "Search Commits",
	"gitlens.showLastQuickPick.title": "Show Last Opened Quick Pick",
	"gitlens.revealCommitInView.title": "Reveal Commit in Repositories View",
	"gitlens.showCommitInView.title": "Show Commit in Search Commits View",
	"gitlens.showCommitsInView.title": "Show Commits within Selection in Search Commits View",
	"gitlens.showFileHistoryInView.title": "Show in File History View",
	"gitlens.showQuickCommitDetails.title": "Show Commit Details",
	"gitlens.showQuickCommitFileDetails.title": "Show Commit Details",
	"gitlens.showQuickRevisionDetails.title": "Show Revision Details",
	"gitlens.showQuickFileHistory.title": "Show File History",
	"gitlens.showQuickBranchHistory.title": "Show Branch History",
	"gitlens.showQuickRepoHistory.title": "Show Current Branch History",
	"gitlens.showQuickRepoStatus.title": "Show Repository Status",
	"gitlens.showQuickStashList.title": "Show Stashes",
	"gitlens.copyMessageToClipboard.title": "Copy Commit Message",
	"gitlens.copyRemoteFileUrlToClipboard.title": "Copy Remote Url",
	"gitlens.copyShaToClipboard.title": "Copy Commit ID",
	"gitlens.closeUnchangedFiles.title": "Close Unchanged Files",
	"gitlens.openChangedFiles.title": "Open Changed Files",
	"gitlens.openBranchesInRemote.title": "Open Branches on Remote",
	"gitlens.openBranchInRemote.title": "Open Branch on Remote",
	"gitlens.openCommitInRemote.title": "Open Commit on Remote",
	"gitlens.openFileInRemote.title": "Open File on Remote",
	"gitlens.openFileRevision.title": "Open Revision...",
	"gitlens.openFileRevisionFrom.title": "Open Revision from...",
	"gitlens.openRepoInRemote.title": "Open Repository on Remote",
	"gitlens.openRevisionFile.title": "Open Revision",
	"gitlens.openWorkingFile.title": "Open File",
	"gitlens.stashApply.title": "Apply Stash",
	"gitlens.stashDelete.title": "Delete Stash...",
	"gitlens.stashSave.title": "Stash All Changes",
	"gitlens.stashSaveFiles.title": "Stash Changes",
	"gitlens.externalDiff.title": "Open Changes (with difftool)",
	"gitlens.externalDiffAll.title": "Open All Changes (with difftool)",
	"gitlens.resetSuppressedWarnings.title": "Reset Suppressed Warnings",
	"gitlens.inviteToLiveShare.title": "Invite to Live Share",
	"gitlens.exploreRepoAtRevision.title": "Explore Repository from Revision",
	"gitlens.views.exploreRepoAtRevision.title": "Explore Repository from Revision",
	"gitlens.fetchRepositories.title": "Fetch Repositories",
	"gitlens.pullRepositories.title": "Pull Repositories",
	"gitlens.pushRepositories.title": "Push Repositories",
	"gitlens.views.addRemote.title": "Add Remote",
	"gitlens.views.highlightChanges.title": "Highlight Changes",
	"gitlens.views.highlightRevisionChanges.title": "Highlight Revision Changes",
	"gitlens.views.restore.title": "Restore",
	"gitlens.views.switchToBranch.title": "Switch to Branch",
	"gitlens.views.switchToCommit.title": "Switch to Commit",
	"gitlens.views.switchToTag.title": "Switch to Tag",
	"gitlens.views.copy.title": "Copy",
	"gitlens.views.repositories.copy.title": "Copy",
	"gitlens.views.fileHistory.copy.title": "Copy",
	"gitlens.views.lineHistory.copy.title": "Copy",
	"gitlens.views.compare.copy.title": "Copy",
	"gitlens.views.search.copy.title": "Copy",
	"gitlens.views.pruneRemote.title": "Prune",
	"gitlens.views.fetch.title": "Fetch",
	"gitlens.views.pull.title": "Pull",
	"gitlens.views.push.title": "Push",
	"gitlens.views.pushWithForce.title": "Push (force)",
	"gitlens.views.openInTerminal.title": "Open in Terminal",
	"gitlens.views.setAsDefault.title": "Set as Default",
	"gitlens.views.unsetAsDefault.title": "Unset as Default",
	"gitlens.views.stageDirectory.title": "Stage All Changes",
	"gitlens.views.stageFile.title": "Stage Changes",
	"gitlens.views.unstageDirectory.title": "Unstage All Changes",
	"gitlens.views.unstageFile.title": "Unstage Changes",
	"gitlens.views.star.title": "Add to Favorites",
	"gitlens.views.unstar.title": "Remove from Favorites",
	"gitlens.views.openDirectoryDiff.title": "Open Directory Compare",
	"gitlens.views.openDirectoryDiffWithWorking.title": "Open Directory Compare with Working Tree",
	"gitlens.views.openChanges.title": "Open Changes",
	"gitlens.views.openChangesWithWorking.title": "Open Changes with Working File",
	"gitlens.views.openFile.title": "Open File",
	"gitlens.views.openFileRevision.title": "Open Revision",
	"gitlens.views.openFileRevisionInRemote.title": "Open Revision on Remote",
	"gitlens.views.openChangedFiles.title": "Open Files",
	"gitlens.views.openChangedFileDiffs.title": "Open All Changes",
	"gitlens.views.openChangedFileDiffsWithWorking.title": "Open All Changes with Working Tree",
	"gitlens.views.openChangedFileRevisions.title": "Open Revisions",
	"gitlens.views.applyChanges.title": "Apply Changes",
	"gitlens.views.closeRepository.title": "Close Repository",
	"gitlens.views.compareAncestryWithWorking.title": "Compare Ancestry with Working Tree",
	"gitlens.views.compareWithHead.title": "Compare with HEAD",
	"gitlens.views.compareWithRemote.title": "Compare with Remote",
	"gitlens.views.compareWithSelected.title": "Compare with Selected",
	"gitlens.views.selectForCompare.title": "Select for Compare",
	"gitlens.views.compareFileWithSelected.title": "Compare with Selected",
	"gitlens.views.selectFileForCompare.title": "Select for Compare",
	"gitlens.views.compareWithWorking.title": "Compare with Working Tree",
	"gitlens.views.contributors.addAuthors.title": "Add Co-authors",
	"gitlens.views.contributor.addAuthor.title": "Add as Co-author",
	"gitlens.views.contributor.copyToClipboard.title": "Copy",
	"gitlens.views.setComparisonToTwoDot.title": "Switch to Two-dot Comparison",
	"gitlens.views.setComparisonToThreeDot.title": "Switch to Three-dot Comparison",
	"gitlens.views.cherryPick.title": "Cherry Pick Commit...",
	"gitlens.views.createBranch.title": "Create Branch...",
	"gitlens.views.deleteBranch.title": "Delete Branch...",
	"gitlens.views.renameBranch.title": "Rename Branch...",
	"gitlens.views.createTag.title": "Create Tag...",
	"gitlens.views.deleteTag.title": "Delete Tag...",
	"gitlens.views.mergeBranchInto.title": "Merge Branch into Current...",
	"gitlens.views.rebaseOntoBranch.title": "Rebase Current onto Branch...",
	"gitlens.views.rebaseOntoCommit.title": "Rebase Current onto Commit...",
	"gitlens.views.rebaseOntoUpstream.title": "Rebase Current onto Upstream...",
	"gitlens.views.reset.title": "Reset to Commit...",
	"gitlens.views.revert.title": "Revert Commit...",
	"gitlens.views.terminalPushCommit.title": "Push to Commit (via Terminal)",
	"gitlens.views.terminalRemoveRemote.title": "Remove Remote (via Terminal)",
	"gitlens.views.repositories.refresh.title": "Refresh",
	"gitlens.views.repositories.setBranchComparisonToWorking.title": "Switch to Working Tree Comparison",
	"gitlens.views.repositories.setBranchComparisonToBranch.title": "Switch to Branch Comparison",
	"gitlens.views.repositories.setBranchesLayoutToList.title": "Toggle Branch Layout (Tree)",
	"gitlens.views.repositories.setBranchesLayoutToTree.title": "Toggle Branch Layout (List)",
	"gitlens.views.repositories.setFilesLayoutToAuto.title": "Toggle File Layout (Tree)",
	"gitlens.views.repositories.setFilesLayoutToList.title": "Toggle File Layout (Auto)",
	"gitlens.views.repositories.setFilesLayoutToTree.title": "Toggle File Layout (List)",
	"gitlens.views.repositories.setAutoRefreshToOn.title": "Enable Automatic Refresh",
	"gitlens.views.repositories.setAutoRefreshToOff.title": "Disable Automatic Refresh",
	"gitlens.views.fileHistory.refresh.title": "Refresh",
	"gitlens.views.fileHistory.changeBase.title": "Change Base...",
	"gitlens.views.fileHistory.setEditorFollowingOn.title": "Resume File Tracking",
	"gitlens.views.fileHistory.setEditorFollowingOff.title": "Pause File Tracking",
	"gitlens.views.fileHistory.setRenameFollowingOn.title": "Follow Renames",
	"gitlens.views.fileHistory.setRenameFollowingOff.title": "Don't Follow Renames",
	"gitlens.views.lineHistory.refresh.title": "Refresh",
	"gitlens.views.lineHistory.changeBase.title": "Change Base...",
	"gitlens.views.lineHistory.setEditorFollowingOn.title": "Resume Line Tracking",
	"gitlens.views.lineHistory.setEditorFollowingOff.title": "Pause Line Tracking",
	"gitlens.views.lineHistory.setRenameFollowingOn.title": "Follow Renames",
	"gitlens.views.lineHistory.setRenameFollowingOff.title": "Don't Follow Renames",
	"gitlens.views.compare.selectForCompare.title": "Compare References...",
	"gitlens.views.compare.clear.title": "Clear Results",
	"gitlens.views.compare.refresh.title": "Refresh",
	"gitlens.views.compare.setFilesLayoutToAuto.title": "Automatic Layout",
	"gitlens.views.compare.setFilesLayoutToList.title": "List Layout",
	"gitlens.views.compare.setFilesLayoutToTree.title": "Tree Layout",
	"gitlens.views.compare.setKeepResultsToOn.title": "Keep Results",
	"gitlens.views.compare.setKeepResultsToOff.title": "Keep Results",
	"gitlens.views.compare.pinComparison.title": "Pin Comparison",
	"gitlens.views.compare.unpinComparison.title": "Unpin Comparison",
	"gitlens.views.compare.swapComparison.title": "Swap Comparison",
	"gitlens.views.search.searchCommits.title": "Search Commits",
	"gitlens.views.search.clear.title": "Clear Results",
	"gitlens.views.search.refresh.title": "Refresh",
	"gitlens.views.search.setFilesLayoutToAuto.title": "Automatic Layout",
	"gitlens.views.search.setFilesLayoutToList.title": "List Layout",
	"gitlens.views.search.setFilesLayoutToTree.title": "Tree Layout",
	"gitlens.views.search.setKeepResultsToOn.title": "Keep Results",
	"gitlens.views.search.setKeepResultsToOff.title": "Keep Results",
	"gitlens.views.dismissNode.title": "Dismiss",
	"gitlens.views.expandNode.title": "Expand",
	"gitlens.views.refreshNode.title": "Refresh",
	"gitlens.views.showMoreChildren.title": "Show More",
	"gitlens.views.showAllChildren.title": "Show All",
	"gitlens.views.repositories:gitlens.name": "Repositories",
	"gitlens.views.fileHistory:gitlens.name": "File History",
	"gitlens.views.lineHistory:gitlens.name": "Line History",
	"gitlens.views.compare:gitlens.name": "Compare Commits",
	"gitlens.views.search:gitlens.name": "Search Commits",
	"gitlens.views.repositories:explorer.name": "Repositories",
	"gitlens.views.fileHistory:explorer.name": "File History",
	"gitlens.views.lineHistory:explorer.name": "Line History",
	"gitlens.views.compare:explorer.name": "Compare Commits",
	"gitlens.views.search:explorer.name": "Search Commits",
	"gitlens.views.repositories:scm.name": "Repositories",
	"gitlens.views.fileHistory:scm.name": "File History",
	"gitlens.views.lineHistory:scm.name": "Line History",
	"gitlens.views.compare:scm.name": "Compare Commits",
	"gitlens.views.search:scm.name": "Search Commits",
	"gitlens.gutterBackgroundColor.description": "Specifies the background color of the gutter blame annotations",
    "gitlens.gutterForegroundColor.description": "Specifies the foreground color of the gutter blame annotations",
    "gitlens.gutterUncommittedForegroundColor.description": "Specifies the foreground color of an uncommitted line in the gutter blame annotations",
    "gitlens.trailingLineBackgroundColor.description": "Specifies the background color of the blame annotation for the current line",
    "gitlens.trailingLineForegroundColor.description": "Specifies the foreground color of the blame annotation for the current line",
    "gitlens.lineHighlightBackgroundColor.description": "Specifies the background color of the associated line highlights in blame annotations",
	"gitlens.lineHighlightOverviewRulerColor.description": "Specifies the overview ruler color of the associated line highlights in blame annotations",
    "configuration.title": "GitLens — Use 'GitLens: Open Settings' for a richer, interactive experience",
    "gitlens.autolinks.markdownDescription": "Specifies autolinks to external resources in commit messages. Use `<num>` as the variable for the reference number",
    "gitlens.autolinks.items.properties.prefix.description": "Specifies the short prefix to use to generate autolinks for the external resource",
    "gitlens.autolinks.items.properties.ignoreCase.description": "Specifies whether case should be ignored when matching the prefix",
    "gitlens.autolinks.items.properties.title.description": "Specifies an optional title for the generated autolink. Use `<num>` as the variable for the reference number",
    "gitlens.autolinks.items.properties.url.description": "Specifies the url of the external resource you want to link to. Use `<num>` as the variable for the reference number",
    "gitlens.blame.avatars.markdownDescription": "Specifies whether to show avatar images in the gutter blame annotations",
    "gitlens.blame.compact.markdownDescription": "Specifies whether to compact (deduplicate) matching adjacent gutter blame annotations",
    "gitlens.blame.dateFormat.markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in gutter blame annotations. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
    "gitlens.blame.format.markdownDescription": "Specifies the format of the gutter blame annotations. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.blame.dateFormat#` setting",
    "gitlens.blame.heatmap.enabled.markdownDescription": "Specifies whether to provide a heatmap indicator in the gutter blame annotations",
    "gitlens.blame.heatmap.location.markdownDescription": "Specifies where the heatmap indicators will be shown in the gutter blame annotations",
    "gitlens.blame.heatmap.location.enumDescriptions.left": "Adds a heatmap indicator on the left edge of the gutter blame annotations",
    "gitlens.blame.heatmap.location.enumDescriptions.right": "Adds a heatmap indicator on the right edge of the gutter blame annotations",
    "gitlens.blame.highlight.enabled.markdownDescription": "Specifies whether to highlight lines associated with the current line",
    "gitlens.blame.highlight.locations.markdownDescription": "Specifies where the associated line highlights will be shown",
    "gitlens.blame.highlight.locations.items.enumDescriptions.gutter": "Adds a gutter glyph",
    "gitlens.blame.highlight.locations.items.enumDescriptions.line": "Adds a full-line highlight background color",
    "gitlens.blame.highlight.locations.items.enumDescriptions.overview": "Adds a decoration to the overview ruler (scroll bar)",
    "gitlens.blame.ignoreWhitespace.markdownDescription": "Specifies whether to ignore whitespace when comparing revisions during blame operations",
    "gitlens.blame.separateLines.markdownDescription": "Specifies whether gutter blame annotations will be separated by a small gap",
    "gitlens.blame.toggleMode.markdownDescription": "Specifies how the gutter blame annotations will be toggled",
    "gitlens.blame.toggleMode.enumDescriptions.file": "Toggles each file individually",
    "gitlens.blame.toggleMode.enumDescriptions.window": "Toggles the window, i.e. all files at once",
    "gitlens.codeLens.authors.command.markdownDescription": "Specifies the command to be executed when an _authors_ code lens is clicked",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.toggleFileBlame": "Toggles file blame annotations",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.diffWithPrevious": "Compares the current committed file with the previous commit",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.revealCommitInView": "Reveals the commit in the Repositories view",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.showCommitsInView": "Shows the commits within the range in the Search Commits view",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.showQuickCommitDetails": "Shows a commit details quick pick",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.showQuickCommitFileDetails": "Shows a commit file details quick pick",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.showQuickFileHistory": "Shows a file history quick pick",
    "gitlens.codeLens.authors.command.enumDescriptions.gitlens.showQuickRepoHistory": "Shows a branch history quick pick",
    "gitlens.codeLens.authors.enabled.markdownDescription": "Specifies whether to provide an _authors_ code lens, showing number of authors of the file or code block and the most prominent author (if there is more than one)",
    "gitlens.codeLens.enabled.markdownDescription": "Specifies whether to provide any Git code lens, by default. Use the `Toggle Git Code Lens` command (`gitlens.toggleCodeLens`) to toggle the Git code lens on and off for the current window",
    "gitlens.codeLens.includeSingleLineSymbols.markdownDescription": "Specifies whether to provide any Git code lens on symbols that span only a single line",
    "gitlens.codeLens.recentChange.command.markdownDescription": "Specifies the command to be executed when a _recent change_ code lens is clicked",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.toggleFileBlame": "Toggles file blame annotations",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.diffWithPrevious": "Compares the current committed file with the previous commit",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.revealCommitInView": "Reveals the commit in the Repositories view",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.showCommitsInView": "Shows the commit in the Search Commits view",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.showQuickCommitDetails": "Shows a commit details quick pick",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.showQuickCommitFileDetails": "Shows a commit file details quick pick",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.showQuickFileHistory": "Shows a file history quick pick",
    "gitlens.codeLens.recentChange.command.enumDescriptions.gitlens.showQuickRepoHistory": "Shows a branch history quick pick",
    "gitlens.codeLens.recentChange.enabled.markdownDescription": "Specifies whether to provide a _recent change_ code lens, showing the author and date of the most recent commit for the file or code block",
    "gitlens.codeLens.scopes.markdownDescription": "Specifies where Git code lens will be shown in the document",
    "gitlens.codeLens.scopes.items.enumDescriptions.document": "Adds code lens at the top of the document",
    "gitlens.codeLens.scopes.items.enumDescriptions.containers": "Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)",
    "gitlens.codeLens.scopes.items.enumDescriptions.blocks": "Adds code lens at the start of block-like symbols (functions, methods, etc) lines",
    "gitlens.codeLens.scopesByLanguage.markdownDescription": "Specifies where Git code lens will be shown in the document for the specified languages",
    "gitlens.codeLens.scopesByLanguage.items.properties.language.description": "Specifies the language to which this code lens override applies",
    "gitlens.codeLens.scopesByLanguage.items.properties.scopes.description": "Specifies where Git code lens will be shown in the document for the specified language",
    "gitlens.codeLens.scopesByLanguage.items.properties.scopes.items.enumDescriptions.document": "Adds code lens at the top of the document",
    "gitlens.codeLens.scopesByLanguage.items.properties.scopes.items.enumDescriptions.containers": "Adds code lens at the start of container-like symbols (modules, classes, interfaces, etc)",
    "gitlens.codeLens.scopesByLanguage.items.properties.scopes.items.enumDescriptions.blocks": "Adds code lens at the start of block-like symbols (functions, methods, properties, etc) lines",
    "gitlens.codeLens.scopesByLanguage.items.properties.scopes.items.enumDescriptions.custom": "Adds code lens at the start of symbols contained in `symbolScopes`",
    "gitlens.codeLens.scopesByLanguage.items.properties.symbolScopes.description": "Specifies the set of document symbols where Git code lens will be shown in the document for the specified language. Must be a member of `SymbolKind`",
    "gitlens.codeLens.symbolScopes.markdownDescription": "Specifies a set of document symbols where Git code lens will or will not be shown in the document. Prefix with `!` to avoid providing a Git code lens for the symbol. Must be a member of `SymbolKind`",
    "gitlens.currentLine.dateFormat.markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) for the current line blame annotation. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
    "gitlens.currentLine.enabled.markdownDescription": "Specifies whether to provide a blame annotation for the current line, by default. Use the `Toggle Line Blame Annotations` command (`gitlens.toggleLineBlame`) to toggle the annotations on and off for the current window",
    "gitlens.currentLine.format.markdownDescription": "Specifies the format of the current line blame annotation. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.currentLine.dateFormat#` setting",
    "gitlens.currentLine.scrollable.markdownDescription": "Specifies whether the current line blame annotation can be scrolled into view when it is outside the viewport",
    "gitlens.debug.markdownDescription": "Specifies debug mode",
    "gitlens.defaultDateFormat.markdownDescription": "Specifies how absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
    "gitlens.defaultDateShortFormat.markdownDescription": "Specifies how short absolute dates will be formatted by default. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
    "gitlens.defaultDateSource.markdownDescription": "Specifies whether commit dates should use the authored or committed date",
    "gitlens.defaultDateSource.enumDescriptions.authored": "Uses the date when the changes were authored (i.e. originally written)",
    "gitlens.defaultDateSource.enumDescriptions.committed": "Uses the date when the changes were committed",
    "gitlens.defaultDateStyle.markdownDescription": "Specifies how dates will be displayed by default",
    "gitlens.defaultDateStyle.enumDescriptions.relative": "e.g. 1 day ago",
    "gitlens.defaultDateStyle.enumDescriptions.absolute": "e.g. July 25th, 2018 7:18pm",
    "gitlens.defaultGravatarsStyle.markdownDescription": "Specifies the style of the gravatar default (fallback) images",
    "gitlens.defaultGravatarsStyle.enumDescriptions.identicon": "A geometric pattern",
    "gitlens.defaultGravatarsStyle.enumDescriptions.mp": "A simple, cartoon-style silhouetted outline of a person (does not vary by email hash)",
    "gitlens.defaultGravatarsStyle.enumDescriptions.monsterid": "A monster with different colors, faces, etc",
    "gitlens.defaultGravatarsStyle.enumDescriptions.retro": "8-bit arcade-style pixelated faces",
    "gitlens.defaultGravatarsStyle.enumDescriptions.robohash": "A robot with different colors, faces, etc",
    "gitlens.defaultGravatarsStyle.enumDescriptions.wavatar": "A face with differing features and backgrounds",
    "gitlens.gitCommands.closeOnFocusOut.markdownDescription": "Specifies whether to dismiss the Git Commands menu when focus is lost (if not, press `ESC` to dismiss)",
    "gitlens.gitCommands.search.matchAll.markdownDescription": "Specifies whether to match all or any commit message search patterns",
    "gitlens.gitCommands.search.matchCase.markdownDescription": "Specifies whether to match commit search patterns with or without regard to casing",
    "gitlens.gitCommands.search.matchRegex.markdownDescription": "Specifies whether to match commit search patterns using regular expressions",
    "gitlens.gitCommands.search.showResultsInView.markdownDescription": "Specifies whether to show the commit search results in the _Search Commits_ view or directly within the quick pick menu",
    "gitlens.gitCommands.skipConfirmations.markdownDescription": "Specifies which (and when) Git commands will skip the confirmation step, using the format: `git-command-name:(menu|command)`",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.branch-create:command": "Skips branch create confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.branch-create:menu": "Skips branch create confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.co-authors:command": "Skips co-author confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.co-authors:menu": "Skips co-author confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.fetch:command": "Skips fetch confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.fetch:menu": "Skips fetch confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.pull:command": "Skips pull confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.pull:menu": "Skips pull confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.push:command": "Skips push confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.push:menu": "Skips push confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.stash-apply:command": "Skips stash apply confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.stash-apply:menu": "Skips stash apply confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.stash-pop:command": "Skips stash pop confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.stash-pop:menu": "Skips stash pop confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.stash-push:command": "Skips stash push confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.stash-push:menu": "Skips stash push confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.switch:command": "Skips switch confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.switch:menu": "Skips switch confirmations when run from the `Git Commands` menu",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.tag-create:command": "Skips tag create confirmations when run from a command, e.g. a view action",
    "gitlens.gitCommands.skipConfirmations.items.enumDescriptions.tag-create:menu": "Skips tag create confirmations when run from the `Git Commands` menu",
    "gitlens.heatmap.ageThreshold.markdownDescription": "Specifies the age of the most recent change (in days) after which the gutter heatmap annotations will be cold rather than hot (i.e. will use `#gitlens.heatmap.coldColor#` instead of `#gitlens.heatmap.hotColor#`)",
    "gitlens.heatmap.coldColor.markdownDescription": "Specifies the base color of the gutter heatmap annotations when the most recent change is older (cold) than the `#gitlens.heatmap.ageThreshold#` value",
    "gitlens.heatmap.hotColor.markdownDescription": "Specifies the base color of the gutter heatmap annotations when the most recent change is newer (hot) than the `#gitlens.heatmap.ageThreshold#` value",
    "gitlens.heatmap.toggleMode.markdownDescription": "Specifies how the gutter heatmap annotations will be toggled",
    "gitlens.heatmap.toggleMode.enumDescriptions.file": "Toggles each file individually",
    "gitlens.heatmap.toggleMode.enumDescriptions.window": "Toggles the window, i.e. all files at once",
    "gitlens.hovers.annotations.changes.markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for all lines when showing blame annotations",
    "gitlens.hovers.annotations.details.markdownDescription": "Specifies whether to provide a _commit details_ hover for all lines when showing blame annotations",
    "gitlens.hovers.annotations.enabled.markdownDescription": "Specifies whether to provide any hovers when showing blame annotations",
    "gitlens.hovers.annotations.over.markdownDescription": "Specifies when to trigger hovers when showing blame annotations",
    "gitlens.hovers.annotations.over.enumDescriptions.annotation": "Only shown when hovering over the line annotation",
    "gitlens.hovers.annotations.over.enumDescriptions.line": "Shown when hovering anywhere over the line",
    "gitlens.hovers.currentLine.changes.markdownDescription": "Specifies whether to provide a _changes (diff)_ hover for the current line",
    "gitlens.hovers.currentLine.details.markdownDescription": "Specifies whether to provide a _commit details_ hover for the current line",
    "gitlens.hovers.currentLine.enabled.markdownDescription": "Specifies whether to provide any hovers for the current line",
    "gitlens.hovers.currentLine.over.markdownDescription": "Specifies when to trigger hovers for the current line",
    "gitlens.hovers.currentLine.over.enumDescriptions.annotation": "Only shown when hovering over the line annotation",
    "gitlens.hovers.currentLine.over.enumDescriptions.line": "Shown when hovering anywhere over the line",
    "gitlens.hovers.avatars.markdownDescription": "Specifies whether to show avatar images in hovers",
    "gitlens.hovers.changesDiff.markdownDescription": "Specifies whether to show just the changes to the line or the set of related changes in the _changes (diff)_ hover",
    "gitlens.hovers.changesDiff.enumDescriptions.line": "Shows only the changes to the line",
    "gitlens.hovers.changesDiff.enumDescriptions.hunk": "Shows the set of related changes",
    "gitlens.hovers.detailsMarkdownFormat.markdownDescription": "Specifies the format (in markdown) of the _commit details_ hover. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
    "gitlens.hovers.enabled.markdownDescription": "Specifies whether to provide any hovers",
    "gitlens.insiders.markdownDescription": "Specifies whether to enable experimental features",
    "gitlens.keymap.markdownDescription": "Specifies the keymap to use for GitLens shortcut keys",
    "gitlens.keymap.enumDescriptions.alternate": "Adds an alternate set of shortcut keys that start with `Alt` (⌥ on macOS)",
    "gitlens.keymap.enumDescriptions.chorded": "Adds a chorded set of shortcut keys that start with `Ctrl+Alt+G` (`⌥⌘G` on macOS)",
    "gitlens.keymap.enumDescriptions.none": "No shortcut keys will be added",
    "gitlens.liveshare.allowGuestAccess.description": "Specifies whether to allow guest access to GitLens features when using Visual Studio Live Share",
    "gitlens.menus.markdownDescription": "Specifies which commands will be added to which menus",
    "gitlens.mode.active.markdownDescription": "Specifies the active GitLens mode, if any",
    "gitlens.mode.statusBar.enabled.markdownDescription": "Specifies whether to provide the active GitLens mode in the status bar",
    "gitlens.mode.statusBar.alignment.markdownDescription": "Specifies the active GitLens mode alignment in the status bar",
    "gitlens.mode.statusBar.alignment.enumDescriptions.left": "Aligns to the left",
    "gitlens.mode.statusBar.alignment.enumDescriptions.right": "Aligns to the right",
    "gitlens.modes.markdownDescription": "Specifies the user-defined GitLens modes",
    "gitlens.modes.properties.zen.properties.name.description": "Specifies the friendly name of this user-defined mode",
    "gitlens.modes.properties.zen.properties.statusBarItemName.description": "Specifies the name shown in the status bar when this user-defined mode is active",
    "gitlens.modes.properties.zen.properties.description.description": "Specifies the description of this user-defined mode",
    "gitlens.modes.properties.zen.properties.codeLens.description": "Specifies whether to show any Git code lens when this user-defined mode is active",
    "gitlens.modes.properties.zen.properties.currentLine.description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active",
    "gitlens.modes.properties.zen.properties.hovers.description": "Specifies whether to show any hovers when this user-defined mode is active",
    "gitlens.modes.properties.zen.properties.statusBar.description": "Specifies whether to show blame information in the status bar when this user-defined mode is active",
    "gitlens.modes.properties.zen.properties.views.description": "Specifies whether to show any GitLens views when this user-defined mode is active",
    "gitlens.modes.properties.review.properties.name.description": "Specifies the friendly name of this user-defined mode",
    "gitlens.modes.properties.review.properties.statusBarItemName.description": "Specifies the name shown in the status bar when this user-defined mode is active",
    "gitlens.modes.properties.review.properties.description.description": "Specifies the description of this user-defined mode",
    "gitlens.modes.properties.review.properties.codeLens.description": "Specifies whether to show any Git code lens when this user-defined mode is active",
    "gitlens.modes.properties.review.properties.currentLine.description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active",
    "gitlens.modes.properties.review.properties.hovers.description": "Specifies whether to show any hovers when this user-defined mode is active",
    "gitlens.modes.properties.review.properties.statusBar.description": "Specifies whether to show blame information in the status bar when this user-defined mode is active",
    "gitlens.modes.properties.review.properties.views.description": "Specifies whether to show any GitLens views when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.name.description": "Specifies the friendly name of this user-defined mode",
    "gitlens.modes.additionalProperties.properties.statusBarItemName.description": "Specifies the name shown in the status bar when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.description.description": "Specifies the description of this user-defined mode",
    "gitlens.modes.additionalProperties.properties.annotations.description": "Specifies which (if any) file annotations will be shown when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.annotations.enumDescriptions.blame": "Shows the gutter blame annotations",
    "gitlens.modes.additionalProperties.properties.annotations.enumDescriptions.heatmap": "Shows the gutter heatmap annotations",
    "gitlens.modes.additionalProperties.properties.annotations.enumDescriptions.recentChanges": "Shows the recently changed lines annotations",
    "gitlens.modes.additionalProperties.properties.codeLens.description": "Specifies whether to show any Git code lens when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.currentLine.description": "Specifies whether to show a blame annotation for the current line when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.hovers.description": "Specifies whether to show any hovers when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.statusBar.description": "Specifies whether to show blame information in the status bar when this user-defined mode is active",
    "gitlens.modes.additionalProperties.properties.views.description": "Specifies whether to show any GitLens views when this user-defined mode is active",
    "gitlens.modes.default.zen.description": "for a zen-like experience, disables many visual features",
    "gitlens.modes.default.review.description": "for reviewing code, enables many visual features",
    "gitlens.outputLevel.markdownDescription": "Specifies how much (if any) output will be sent to the GitLens output channel",
    "gitlens.outputLevel.enumDescriptions.silent": "Logs nothing",
    "gitlens.outputLevel.enumDescriptions.errors": "Logs only errors",
    "gitlens.outputLevel.enumDescriptions.verbose": "Logs all errors, warnings, and messages",
    "gitlens.outputLevel.enumDescriptions.debug": "Logs all errors, warnings, and messages with extra context useful for debugging",
    "gitlens.recentChanges.highlight.locations.markdownDescription": "Specifies where the highlights of the recently changed lines will be shown",
    "gitlens.recentChanges.highlight.locations.items.enumDescriptions.gutter": "Adds a gutter glyph",
    "gitlens.recentChanges.highlight.locations.items.enumDescriptions.line": "Adds a full-line highlight background color",
    "gitlens.recentChanges.highlight.locations.items.enumDescriptions.overview": "Adds a decoration to the overview ruler (scroll bar)",
    "gitlens.recentChanges.toggleMode.markdownDescription": "Specifies how the recently changed lines annotations will be toggled",
    "gitlens.recentChanges.toggleMode.enumDescriptions.file": "Toggles each file individually",
    "gitlens.recentChanges.toggleMode.enumDescriptions.window": "Toggles the window, i.e. all files at once",
    "gitlens.remotes.markdownDescription": "Specifies user-defined remote (code-hosting) services or custom domains for built-in remote services",
    "gitlens.remotes.items.properties.description": "Specifies the url formats of the custom remote service",
    "gitlens.remotes.items.properties.type.description": "Specifies the type of the custom remote service",
    "gitlens.remotes.items.properties.domain.description": "Specifies the domain name of the custom remote service",
    "gitlens.remotes.items.properties.name.description": "Specifies an optional friendly name for the custom remote service",
    "gitlens.remotes.items.properties.protocol.description": "Specifies an optional url protocol for the custom remote service",
    "gitlens.remotes.items.properties.urls.properties.repository.description": "Specifies the format of a respository url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path",
    "gitlens.remotes.items.properties.urls.properties.branches.description": "Specifies the format of a branches url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${branch}` &mdash; branch",
    "gitlens.remotes.items.properties.urls.properties.branch.description": "Specifies the format of a branch url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${branch}` &mdash; branch",
    "gitlens.remotes.items.properties.urls.properties.commit.description": "Specifies the format of a commit url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${id}` &mdash; commit id",
    "gitlens.remotes.items.properties.urls.properties.file.description": "Specifies the format of a file url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${file}` &mdash; file name\n ${line}` &mdash; formatted line information",
    "gitlens.remotes.items.properties.urls.properties.fileInBranch.description": "Specifies the format of a branch file url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${file}` &mdash; file name\n ${branch}` &mdash; branch\n ${line}` &mdash; formatted line information",
    "gitlens.remotes.items.properties.urls.properties.fileInCommit.description": "Specifies the format of a commit file url for the custom remote service\nAvailable tokens\n ${repo}` &mdash; repository path\n ${file}` &mdash; file name\n ${id}` &mdash; commit id\n ${line}` &mdash; formatted line information",
    "gitlens.remotes.items.properties.urls.properties.fileLine.description": "Specifies the format of a line in a file url for the custom remote service\nAvailable tokens\n ${line}` &mdash; line",
    "gitlens.remotes.items.properties.urls.properties.fileRange.description": "Specifies the format of a range in a file url for the custom remote service\nAvailable tokens\n ${start}` &mdash; starting line\n ${end}` &mdash; ending line",
    "gitlens.showWhatsNewAfterUpgrades.markdownDescription": "Specifies whether to show What's New after upgrading to new feature releases",
    "gitlens.sortBranchesBy.markdownDescription": "Specifies how branches are sorted in quick pick menus and views",
    "gitlens.sortBranchesBy.enumDescriptions.name:desc": "Sorts branches by name in descending order",
    "gitlens.sortBranchesBy.enumDescriptions.name:asc": "Sorts branches by name in ascending order",
    "gitlens.sortBranchesBy.enumDescriptions.date:desc": "Sorts branches by the most recent commit date in descending order",
    "gitlens.sortBranchesBy.enumDescriptions.date:asc": "Sorts branches by the most recent commit date in ascending order",
    "gitlens.sortTagsBy.markdownDescription": "Specifies how tags are sorted in quick pick menus and views",
    "gitlens.sortTagsBy.enumDescriptions.name:desc": "Sorts tags by name in descending order",
    "gitlens.sortTagsBy.enumDescriptions.name:asc": "Sorts tags by name in ascending order",
    "gitlens.sortTagsBy.enumDescriptions.date:desc": "Sorts tags by date in descending order",
    "gitlens.sortTagsBy.enumDescriptions.date:asc": "Sorts tags by date in ascending order",
    "gitlens.statusBar.alignment.markdownDescription": "Specifies the blame alignment in the status bar",
    "gitlens.statusBar.alignment.enumDescriptions.left": "Aligns to the left",
    "gitlens.statusBar.alignment.enumDescriptions.right": "Aligns to the right",
    "gitlens.statusBar.command.markdownDescription": "Specifies the command to be executed when the blame status bar item is clicked",
    "gitlens.statusBar.command.enumDescriptions.gitlens.toggleFileBlame": "Toggles file blame annotations",
    "gitlens.statusBar.command.enumDescriptions.gitlens.diffWithPrevious": "Compares the current line commit with the previous",
    "gitlens.statusBar.command.enumDescriptions.gitlens.diffWithWorking": "Compares the current line commit with the working tree",
    "gitlens.statusBar.command.enumDescriptions.gitlens.toggleCodeLens": "Toggles Git code lens",
    "gitlens.statusBar.command.enumDescriptions.gitlens.revealCommitInView": "Reveals the commit in the Repositories view",
    "gitlens.statusBar.command.enumDescriptions.gitlens.showCommitsInView": "Shows the commit in the Search Commits view",
    "gitlens.statusBar.command.enumDescriptions.gitlens.showQuickCommitDetails": "Shows a commit details quick pick",
    "gitlens.statusBar.command.enumDescriptions.gitlens.showQuickCommitFileDetails": "Shows a commit file details quick pick",
    "gitlens.statusBar.command.enumDescriptions.gitlens.showQuickFileHistory": "Shows a file history quick pick",
    "gitlens.statusBar.command.enumDescriptions.gitlens.showQuickRepoHistory": "Shows a branch history quick pick",
    "gitlens.statusBar.dateFormat.markdownDescription": "Specifies how to format absolute dates (e.g. using the `${date}` token) in the blame information in the status bar. See the [Moment.js docs](https://momentjs.com/docs/#/displaying/format/) for valid formats",
    "gitlens.statusBar.enabled.markdownDescription": "Specifies whether to provide blame information in the status bar",
    "gitlens.statusBar.format.markdownDescription": "Specifies the format of the blame information in the status bar. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs. Date formatting is controlled by the `#gitlens.statusBar.dateFormat#` setting",
    "gitlens.statusBar.reduceFlicker.markdownDescription": "Specifies whether to avoid clearing the previous blame information when changing lines to reduce status bar \"flashing\"",
    "gitlens.strings.codeLens.unsavedChanges.recentChangeAndAuthors.markdownDescription": "Specifies the string to be shown in place of both the _recent change_ and _authors_ code lens when there are unsaved changes",
    "gitlens.strings.codeLens.unsavedChanges.recentChangeOnly.markdownDescription": "Specifies the string to be shown in place of the _recent change_ code lens when there are unsaved changes",
    "gitlens.strings.codeLens.unsavedChanges.authorsOnly.markdownDescription": "Specifies the string to be shown in place of the _authors_ code lens when there are unsaved changes",
    "gitlens.views.commitFileFormat.markdownDescription": "Specifies the format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
    "gitlens.views.commitFileDescriptionFormat.markdownDescription": "Specifies the description format of a committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
    "gitlens.views.commitFormat.markdownDescription": "Specifies the format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
    "gitlens.views.commitDescriptionFormat.markdownDescription": "Specifies the description format of committed changes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
    "gitlens.views.compare.avatars.markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Compare_ view",
    "gitlens.views.compare.enabled.markdownDescription": "Specifies whether to show the _Compare_ view",
    "gitlens.views.compare.files.compact.markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Compare_ view. Only applies when `#gitlens.views.compare.files.layout#` is set to `tree` or `auto`",
    "gitlens.views.compare.files.layout.markdownDescription": "Specifies how the _Compare_ view will display files",
    "gitlens.views.compare.files.layout.enumDescriptions.auto": "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.compare.files.threshold#` value and the number of files at each nesting level",
    "gitlens.views.compare.files.layout.enumDescriptions.list": "Displays files as a list",
    "gitlens.views.compare.files.layout.enumDescriptions.tree": "Displays files as a tree",
    "gitlens.views.compare.files.threshold.markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Compare_ view. Only applies when `#gitlens.views.compare.files.layout#` is set to `auto`",
    "gitlens.views.compare.location.markdownDescription": "Specifies where to show the _Compare_ view",
    "gitlens.views.compare.location.enumDescriptions.gitlens": "Adds to the GitLens side bar",
    "gitlens.views.compare.location.enumDescriptions.explorer": "Adds to the Explorer side bar",
    "gitlens.views.compare.location.enumDescriptions.scm": "Adds to the Source Control side bar",
    "gitlens.views.defaultItemLimit.markdownDescription": "Specifies the default number of items to show in a view list. Use 0 to specify no limit",
    "gitlens.views.pageItemLimit.markdownDescription": "Specifies the number of items to show in a each page when paginating a view list. Use 0 to specify no limit",
    "gitlens.views.fileHistory.avatars.markdownDescription": "Specifies whether to show avatar images instead of status icons in the _File History_ view",
    "gitlens.views.fileHistory.enabled.markdownDescription": "Specifies whether to show the _File History_ view",
    "gitlens.views.fileHistory.location.markdownDescription": "Specifies where to show the _File History_ view",
    "gitlens.views.fileHistory.location.enumDescriptions.gitlens": "Adds to the GitLens side bar",
    "gitlens.views.fileHistory.location.enumDescriptions.explorer": "Adds to the Explorer side bar",
    "gitlens.views.fileHistory.location.enumDescriptions.scm": "Adds to the Source Control side bar",
    "gitlens.views.lineHistory.avatars.markdownDescription": "Specifies whether to show avatar images instead of status icons in the _Line History_ view",
    "gitlens.views.lineHistory.enabled.markdownDescription": "Specifies whether to show the _Line History_ view",
    "gitlens.views.lineHistory.location.markdownDescription": "Specifies where to show the _Line History_ view",
    "gitlens.views.lineHistory.location.enumDescriptions.gitlens": "Adds to the GitLens side bar",
    "gitlens.views.lineHistory.location.enumDescriptions.explorer": "Adds to the Explorer side bar",
    "gitlens.views.lineHistory.location.enumDescriptions.scm": "Adds to the Source Control side bar",
    "gitlens.views.repositories.autoRefresh.markdownDescription": "Specifies whether to automatically refresh the _Repositories_ view when the repository or the file system changes",
    "gitlens.views.repositories.autoReveal.markdownDescription": "Specifies whether to automatically reveal repositories in the _Repositories_ view when opening files",
    "gitlens.views.repositories.avatars.markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Repositories_ view",
    "gitlens.views.repositories.branches.layout.markdownDescription": "Specifies how the _Repositories_ view will display branches",
    "gitlens.views.repositories.branches.layout.enumDescriptions.list": "Displays branches as a list",
    "gitlens.views.repositories.branches.layout.enumDescriptions.tree": "Displays branches as a tree when branch names contain slashes `/`",
    "gitlens.views.repositories.compact.markdownDescription": "Specifies whether to show the _Repositories_ view in a compact display density",
    "gitlens.views.repositories.enabled.markdownDescription": "Specifies whether to show the _Repositories_ view",
    "gitlens.views.repositories.files.compact.markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `tree` or `auto`",
    "gitlens.views.repositories.files.layout.markdownDescription": "Specifies how the _Repositories_ view will display files",
    "gitlens.views.repositories.files.layout.enumDescriptions.auto": "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.repositories.files.threshold#` value and the number of files at each nesting level",
    "gitlens.views.repositories.files.layout.enumDescriptions.list": "Displays files as a list",
    "gitlens.views.repositories.files.layout.enumDescriptions.tree": "Displays files as a tree",
    "gitlens.views.repositories.files.threshold.markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Repositories_ view. Only applies when `#gitlens.views.repositories.files.layout#` is set to `auto`",
    "gitlens.views.repositories.includeWorkingTree.markdownDescription": "Specifies whether to include working tree file status for each repository in the _Repositories_ view",
    "gitlens.views.repositories.location.markdownDescription": "Specifies where to show the _Repositories_ view",
    "gitlens.views.repositories.location.enumDescriptions.gitlens": "Adds to the GitLens side bar",
    "gitlens.views.repositories.location.enumDescriptions.explorer": "Adds to the Explorer side bar",
    "gitlens.views.repositories.location.enumDescriptions.scm": "Adds to the Source Control side bar",
    "gitlens.views.repositories.showBranchComparison.markdownDescription": "Specifies whether to show a comparison of a user-selected reference (branch, tag. etc) to the current branch or the working tree in the _Repositories_ view",
    "gitlens.views.repositories.showTrackingBranch.markdownDescription": "Specifies whether to show the tracking branch when displaying local branches in the _Repositories_ view",
    "gitlens.views.search.avatars.markdownDescription": "Specifies whether to show avatar images instead of commit (or status) icons in the _Search Commits_ view",
    "gitlens.views.search.enabled.markdownDescription": "Specifies whether to show the _Search Commits_ view",
    "gitlens.views.search.files.compact.markdownDescription": "Specifies whether to compact (flatten) unnecessary file nesting in the _Search Commits_ view. Only applies when `#gitlens.views.search.files.layout#` is set to `tree` or `auto`",
    "gitlens.views.search.files.layout.markdownDescription": "Specifies how the _Search Commits_ view will display files",
    "gitlens.views.search.files.layout.enumDescriptions.auto": "Automatically switches between displaying files as a `tree` or `list` based on the `#gitlens.views.search.files.threshold#` value and the number of files at each nesting level",
    "gitlens.views.search.files.layout.enumDescriptions.list": "Displays files as a list",
    "gitlens.views.search.files.layout.enumDescriptions.tree": "Displays files as a tree",
    "gitlens.views.search.files.threshold.markdownDescription": "Specifies when to switch between displaying files as a `tree` or `list` based on the number of files in a nesting level in the _Search Commits_ view. Only applies when `#gitlens.views.search.files.layout#` is set to `auto`",
    "gitlens.views.search.location.markdownDescription": "Specifies where to show the _Search Commits_ view",
    "gitlens.views.search.location.enumDescriptions.gitlens": "Adds to the GitLens side bar",
    "gitlens.views.search.location.enumDescriptions.explorer": "Adds to the Explorer side bar",
    "gitlens.views.search.location.enumDescriptions.scm": "Adds to the Source Control side bar",
    "gitlens.views.showRelativeDateMarkers.markdownDescription": "Specifies whether to show relative date markers (_Less than a week ago_, _Over a week ago_, _Over a month ago_, etc) on revision (commit) histories in the views",
    "gitlens.views.stashFileFormat.markdownDescription": "Specifies the format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
    "gitlens.views.stashFileDescriptionFormat.markdownDescription": "Specifies the description format of a stashed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
    "gitlens.views.stashFormat.markdownDescription": "Specifies the format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
    "gitlens.views.stashDescriptionFormat.markdownDescription": "Specifies the description format of stashes in the views. See [_Commit Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#commit-tokens) in the GitLens docs",
    "gitlens.views.statusFileFormat.markdownDescription": "Specifies the format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
    "gitlens.views.statusFileDescriptionFormat.markdownDescription": "Specifies the description format of the status of a working or committed file in the views. See [_File Tokens_](https://github.com/eamodio/vscode-gitlens/wiki/Custom-Formatting#file-tokens) in the GitLens docs",
    "gitlens.advanced.abbreviatedShaLength.markdownDescription": "Specifies the length of abbreviated commit ids (shas)",
    "gitlens.advanced.blame.customArguments.markdownDescription": "Specifies additional arguments to pass to the `git blame` command",
    "gitlens.advanced.blame.delayAfterEdit.markdownDescription": "Specifies the time (in milliseconds) to wait before re-blaming an unsaved document after an edit. Use 0 to specify an infinite wait",
    "gitlens.advanced.blame.sizeThresholdAfterEdit.markdownDescription": "Specifies the maximum document size (in lines) allowed to be re-blamed after an edit while still unsaved. Use 0 to specify no maximum",
    "gitlens.advanced.caching.enabled.markdownDescription": "Specifies whether git output will be cached — changing the default is not recommended",
    "gitlens.advanced.fileHistoryFollowsRenames.markdownDescription": "Specifies whether file histories will follow renames — will affect how merge commits are shown in histories",
    "gitlens.advanced.maxListItems.markdownDescription": "Specifies the maximum number of items to show in a list. Use 0 to specify no maximum",
    "gitlens.advanced.maxSearchItems.markdownDescription": "Specifies the maximum number of items to show in a search. Use 0 to specify no maximum",
    "gitlens.advanced.messages.markdownDescription": "Specifies which messages should be suppressed",
    "gitlens.advanced.quickPick.closeOnFocusOut.markdownDescription": "Specifies whether to dismiss quick pick menus when focus is lost (if not, press `ESC` to dismiss)",
    "gitlens.advanced.repositorySearchDepth.markdownDescription": "Specifies how many folders deep to search for repositories",
    "gitlens.advanced.similarityThreshold.markdownDescription": "Specifies the amount (percent) of similarity a deleted and added file pair must have to be considered a rename",
    "gitlens.advanced.telemetry.enabled.markdownDescription": "Specifies whether to enable GitLens telemetry (even if enabled still abides by the overall `#telemetry.enableTelemetry#` setting",
    "gitlens.advanced.useSymmetricDifferenceNotation.markdownDescription": "Specifies whether to use the symmetric difference (three-dot) notation or the range (two-dot) notation for comparisons. See the [Git docs](https://git-scm.com/docs/gitrevisions#_dotted_range_notations)"
}
